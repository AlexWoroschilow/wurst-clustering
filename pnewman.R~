library(igraph)

## MARK NEWMAN'S ALGORITHM AS PROPOSED INÂ  ARXIV REF: physics/0605087
## from: http://lists.gnu.org/archive/html/igraph-help/2007-03/msg00033.html

######################################################################################
# RETURN THE MODULARITY MATRIX AS DEFINED BY NEWMAN 
# Q = A - B WHERE B IS BASED ON A PROBABILITY OF EXISTENCE OF AN EDGE
# IN THIS CASE BASED ON THE CONFIGURATION MODEL
######################################################################################
graph.modularity=function(g){
	d <- degree(g)
	m <- ecount(g)
	vcnt <- vcount(g) 
	B<-matrix(0,nrow=vcnt,ncol=vcnt)
	for(i in 1:vcnt){
		for(j in 1:vcnt){
			B[i,j] <- d[i]*d[j]/(2*m)
		}
	}
	A <- get.adjacency(g)
	Q <- A-B
	return(Q)
}


######################################################################################
# detect.communities
# THE MAIN ROUTINE FROM WHERE COMMUNITIES ARE DETECTED USING THE MODULARITY MATRIX 
######################################################################################
detect.communities=function(g,indvsbl=0){
	V(g)$lbl<-0:(vcount(g)-1)
	V(g)$cmn<-rep(-1,vcount(g))
	g <- modularity.partitioning(g,g,indvsbl)
	####
	#clrs<-rainbow(max(V(g)$cmn)+1)
	#lay<-layout.kamada.kawai(g)
	#plot(g,vertex.color=clrs[V(g)$cmn+1],vertex.size=2,layout=lay, vertex.label=NA, edge.arrow.size=0)
	####
	membership <- V(g)$cmn
	csize <- c()
	for(i in 1:max(V(g)$cmn+1)){
		csize[i] <- length(which(V(g)$cmn==(i-1))) 
	}
	ret <- list(g,membership,csize)
	names(ret) <- c("g","membership","csize")
	return(ret)
}

#####################################################
# modularity.partitioning
# THE RECURSIVE FUNCTION CALL STOPS WHEN A SUBDIVISION DOES
# NOT CONTRIBUTE TO THE MODULARITY (A NEGATIVE LARGEST EIGENVALUE)
#####################################################
modularity.partitioning=function(g,sg,indvsbl){
	## MODULARITY MATRIX OF THE SUBGRAPH
	Q<-graph.modularity(sg)
	## EIGENVALUES OF THE MODULARITY 
	eg<-eigen(Q);
	evl<-eg$values
	max_eval<-sort(evl,decreasing=T,index.return=T)
	## IF INDIVISIBLE THEN COLOR/TAG THE COMMUNITY AND RETURN THE CURRENT GRAPH
	if(round(Re(max_eval$x[1]), digits=2)<=indvsbl) { 
	## COLOR VERTICES IN THE COMMUNITY
		col<-max(V(g)$cmn)+1
		V(g)[V(sg)$lbl]$cmn <- col
		return(g)
	}
	## ELSE GET PRINCIPAL EIGENVECTOR
	v<-Re(eg$vectors[,max_eval$ix[1]])

	## PARTITION THE VERTICES ACCORDING TO THE SIGNS OF THE EIGENVECTOR ELTS 
	neg<-which(v<0)
	pos<-which(v>=0)
	## COLOR VERTICES IN THE COMMUNITY
	## RECURSIVELY EXPLORE THE PARTITION OF NEGATIVE EIGENVECTOR CONTRIBUTIONS
	g <- modularity.partitioning(g,subgraph(g,V(sg)$lbl[neg]),indvsbl) 
	## RECURSIVELY EXPLORE THE PARTITION OF POSITIVE EIGENVECTOR CONTRIBUTIONS
	g <- modularity.partitioning(g,subgraph(g,V(sg)$lbl[pos]),indvsbl)
	return(g)
}

test.modularity=function(){
	tree100 <- graph.tree(100,mode="undirected")
	cmn1 <- detect.communities(tree100,0)
	quartz();
	cmn2 <- detect.communities(tree100,2)
}
#detect.communities(cls[[4]], 2)

######################################################################################
#  memb2clust
######################################################################################
memb2clust<-function(ms, graph, clid){
	clustering <- data.frame(ID=rep("X", length(ms)), DEG=rep(NA, length(ms)), CLUST=rep(NA, length(ms)), 	stringsAsFactors=FALSE)
	sidx <- 1;
	for (i in sort(unique(ms))){
		for(j in 1:length(ms)){
			if(ms[j] == i){
				clustering[sidx, ] <- list(V(graph)[j-1]$name, length(V(graph)[ nei( j-1 ) ]), clid)
				sidx <- sidx+1
			}
		}
		clid <- clid+1
	}
	return(clustering)
}
######################################################################################
#  do.clustering
######################################################################################
do.clustering<-function(graph, clbase){
	sidx <- 1
    clid <- clbase
	if ( length(V(graph)) < 5 ){    # Simply add trivial clusters to output
		tc <- data.frame(ID=rep(" ", length(V(graph))), DEG=rep(NA, length(V(graph))), CLUST=rep(NA, length(V(graph))),	stringsAsFactors=FALSE)
		for ( i in 0:( length(V(graph))-1 ) ){
			tc[sidx, ] <- list( V(graph)[i]$name, length(V(graph)[ nei( i ) ]), clid )
			sidx <- sidx+1
		}
		clid <- clid+1
		return(tc)
	}
	else{ # cluster interesting graphs
		ms<-detect.communities(graph, 2)$membership
		tc<-memb2clust(ms, graph, clid+1)
		
		sidx <- sidx+length(tc)
		clid <- tc[length(tc[,1]), 3]
        rm(graph)
		return(tc)	
	}
}


######################################################################################
# cluster.graph
######################################################################################
cluster.graph<-function(G){
	cls2<-decompose.graph(G, min.vertices = 0)
    rm(G)
	clid <- 0;
	sidx <- 1;
#	for ( c in 1:length(cls2)){
	for ( c in 1:8){
		tc<-do.clustering(cls2[[c]], c*1000)
        for (i in 1:length(tc[,1])){
            clustering[sidx,] <- tc[i,]
            sidx <- sidx+1
        }
        rm(tc)
	}
	sortclust<-clustering[ order(clustering$CLUST, -clustering$DEG), ]
	return(sortclust)
}

######################################################################################
# cluster.graph.parallel
######################################################################################
cluster.graph.parallel<-function(G){
	library(doMC)
	registerDoMC()
	cls2<-decompose.graph(G, min.vertices = 0)
    rm(G)
	clid <- 0;
	sidx <- 1;
	clustering<- foreach ( c in 1:length(cls2), .combine=cbind) %dopar%{
#	clustering<- foreach ( c <- 1:8, .combine=cbind)%dopar%{
		do.clustering(cls2[[c]], c*1000)
	}
	sortclust<-clustering[ order(clustering$CLUST, -clustering$DEG), ]
	return(sortclust)
}


######################################################################################
#  print.clustering
######################################################################################
print.clustering<-function(sortclust, filen=''){
	clid = sortclust[1, ]$CLUST
	idx<- 1
	for (i in 1:length(sortclust[,1])){
		if(clid != sortclust[i, ]$CLUST){
			clid<-sortclust[i, ]$CLUST
			idx<- 1
		}
		cat(sortclust[i, ]$CLUST, idx, sortclust[i, ]$ID, sep='\t', file=filen, append=TRUE)
		cat('\n', file=filen, append=TRUE)
		idx<-idx+1	
	}
}

######################################################################################
# split.singletons 
######################################################################################
split.singletons<-function(sortclust){
	clid = sortclust[1,]$CLUST
	newclust <- data.frame(ID=rep(" ", length(sortclust[,1])), DEG=rep(NA, length(sortclust[,1])), CLUST=rep(NA, length(sortclust[,1])), 	stringsAsFactors=FALSE)
	newclust[1, ] <- sortclust[1, ]
	for (i in 2:length(sortclust[,1])){
		if(sortclust[i, ]$DEG == 0 || sortclust[i,]$CLUST != sortclust[i-1,]$CLUST){
			clid <- clid+1	
		}
		newclust[i, ] <- list(sortclust[i, ]$ID, sortclust[i, ]$DEG, clid)
	}
    return(newclust)
}

######################################################################################
# rewrite.degrees 
######################################################################################
rewrite.degrees<-function(sortclust, graph){
	for (i in unique(sortclust$CLUST)){
        sgids <- sortclust$ID[sortclust$CLUST==i]
		sg <- subgraph(graph, sgids)
        rm(sgids)
        for ( j in V(sg)$name){
		    sortclust[ sortclust$ID==j, ]$DEG <- length(V(sg)[ nei( j) ])
	    }
    }
    return(sortclust)
}

G<-read.graph("/home/margraf/rstuff/all_k50_tmscore.ncol", format='ncol')
G <- delete.edges(G, E(G)[ weight < 0.4 ])
rclust<-cluster.graph.parallel(G)
rclust<-rewrite.degrees(rclust, G)
rclust<-split.singletons(rclust)
print.clustering(rclust, filen="/home/margraf/rstuff/parallel_tm_rmSG_0.4.clust")
